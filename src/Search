public class Search {
    // variables


    // constructor
    public Search() {

    }

    // methods
    
}	
    public static ArrayList<Node> calculateSolution(Node nodeBeingChecked, ArrayList<Node> explored) {
		solution.add(Problem.goal);
		if (nodeBeingChecked != problem.initialState) {
			for (int j = 0; j < explored.size(); j++) {
				// for all parents of nodeBeingChecked:
				for (int i = 0; i < nodeBeingChecked.parents.size(); i++) {
					// if the explored set contains one of the parents,
					if (explored.contains(nodeBeingChecked.parents.get(i))) {
						System.out
								.println(nodeBeingChecked.place + "'s parent, " + nodeBeingChecked.parents.get(i).place
										+ ", is in the explored set. Adding to solution");
						solution.add(0, nodeBeingChecked.parents.get(i));
						nodeBeingChecked = solution.get(0);
						break;
						// add it to the solution list at the beginning.
					} // if parent is in explored set
				} // for all parents of nodeBeingChecked
			}

		} // if nodeBeingChecked is not home
		System.out.print("Solution is ");
		for (int i = 0; i < solution.size(); i++) {
			System.out.print(i + ". " + solution.get(i).place + " ");
		}
		System.out.println("");
		return solution;
	}